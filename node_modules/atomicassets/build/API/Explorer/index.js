"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Explorer_1 = __importDefault(require("../../Actions/Explorer"));
const ApiError_1 = __importDefault(require("../../Errors/ApiError"));
class ExplorerApi {
    constructor(endpoint, namespace, args) {
        this.endpoint = endpoint;
        this.namespace = namespace;
        if (args.fetch) {
            this.fetchBuiltin = args.fetch;
        }
        else {
            this.fetchBuiltin = global.fetch;
        }
        this.action = (async () => {
            return new Explorer_1.default((await this.getConfig()).contract, this);
        })();
    }
    async getConfig() {
        return await this.fetchEndpoint('/v1/config', {});
    }
    async getAssets(options = {}, page = 1, limit = 100, data = {}) {
        const dataKeys = Object.keys(data);
        for (const key of dataKeys) {
            options['data.' + key] = data[key];
        }
        return await this.fetchEndpoint('/v1/assets', Object.assign({ page, limit }, options));
    }
    async getAsset(id) {
        return await this.fetchEndpoint('/v1/assets/' + id, {});
    }
    async getAssetLogs(id, page = 1, limit = 100, order = 'desc') {
        return await this.fetchEndpoint('/v1/assets/' + id + '/logs', { page, limit, order });
    }
    async getCollections(options = {}, page = 1, limit = 100) {
        return await this.fetchEndpoint('/v1/collections', Object.assign({ page, limit }, options));
    }
    async getCollection(name) {
        return await this.fetchEndpoint('/v1/collections/' + name, {});
    }
    async getCollectionLogs(name, page = 1, limit = 100, order = 'desc') {
        return await this.fetchEndpoint('/v1/collections/' + name + '/logs', { page, limit, order });
    }
    async getSchemas(options = {}, page = 1, limit = 100) {
        return await this.fetchEndpoint('/v1/schemas', Object.assign({ page, limit }, options));
    }
    async getSchema(collection, name) {
        return await this.fetchEndpoint('/v1/schemas/' + collection + '/' + name, {});
    }
    async getSchemaStats(collection, name) {
        return await this.fetchEndpoint('/v1/schemas/' + collection + '/' + name + '/stats', {});
    }
    async getSchemaLogs(collection, name, page = 1, limit = 100, order = 'desc') {
        return await this.fetchEndpoint('/v1/schemas/' + collection + '/' + name + '/logs', { page, limit, order });
    }
    async getTemplates(options = {}, page = 1, limit = 100, data) {
        const dataKeys = Object.keys(data);
        for (const key of dataKeys) {
            options['data.' + key] = data[key];
        }
        return await this.fetchEndpoint('/v1/templates', Object.assign({ page, limit }, options));
    }
    async getTemplate(collection, id) {
        return await this.fetchEndpoint('/v1/templates/' + collection + '/' + id, {});
    }
    async getTemplateStats(collection, name) {
        return await this.fetchEndpoint('/v1/templates/' + collection + '/' + name + '/stats', {});
    }
    async getTemplateLogs(collection, id, page = 1, limit = 100, order = 'desc') {
        return await this.fetchEndpoint('/v1/templates/' + collection + '/' + id + '/logs', { page, limit, order });
    }
    async getTransfers(options = {}, page = 1, limit = 100) {
        return await this.fetchEndpoint('/v1/transfers', Object.assign({ page, limit }, options));
    }
    async getOffers(options = {}, page = 1, limit = 100) {
        return await this.fetchEndpoint('/v1/offers', Object.assign({ page, limit }, options));
    }
    async getOffer(id) {
        return await this.fetchEndpoint('/v1/offers/' + id, {});
    }
    async fetchEndpoint(path, args) {
        let response;
        const f = this.fetchBuiltin;
        const queryString = Object.keys(args).map((key) => {
            return key + '=' + encodeURIComponent(args[key]);
        }).join('&');
        try {
            response = await f(this.endpoint + '/' + this.namespace + path + (queryString.length > 0 ? '?' + queryString : ''));
        }
        catch (e) {
            throw new ApiError_1.default(e.message, 500);
        }
        const json = await response.json();
        if (response.status !== 200) {
            throw new ApiError_1.default(json.message, response.status);
        }
        if (!json.success) {
            throw new ApiError_1.default(json.message, response.status);
        }
        return json.data;
    }
}
exports.default = ExplorerApi;
