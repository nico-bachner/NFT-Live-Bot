import ExplorerActionGenerator from '../../Actions/Explorer';
import { ApiAsset, ApiCollection, ApiConfig, ApiLog, ApiOffer, ApiSchema, ApiSchemaStats, ApiTemplate, ApiTemplateStats, ApiTransfer } from './Types';
declare type Fetch = (input?: Request | string, init?: RequestInit) => Promise<Response>;
declare type ApiArgs = {
    fetch?: Fetch;
    rateLimit?: number;
};
export default class ExplorerApi {
    readonly action: Promise<ExplorerActionGenerator>;
    private readonly endpoint;
    private readonly namespace;
    private readonly fetchBuiltin;
    constructor(endpoint: string, namespace: string, args: ApiArgs);
    getConfig(): Promise<ApiConfig>;
    getAssets(options?: {
        owner?: string;
        collection_name?: string;
        schema_name?: string;
        template_id?: number;
        match?: string;
        authorized_account?: string;
        order?: string;
        sort?: string;
        [key: string]: any;
    }, page?: number, limit?: number, data?: {
        [key: string]: any;
    }): Promise<ApiAsset[]>;
    getAsset(id: string): Promise<ApiAsset>;
    getAssetLogs(id: string, page?: number, limit?: number, order?: string): Promise<ApiLog[]>;
    getCollections(options?: {
        author?: string;
        match?: string;
        authorized_account?: string;
        notify_account?: string;
        order?: string;
        sort?: string;
    }, page?: number, limit?: number): Promise<ApiCollection[]>;
    getCollection(name: string): Promise<ApiCollection>;
    getCollectionLogs(name: string, page?: number, limit?: number, order?: string): Promise<ApiLog[]>;
    getSchemas(options?: {
        collection_name?: string;
        schema_name?: string;
        match?: string;
        authorized_account?: string;
        order?: string;
        sort?: string;
    }, page?: number, limit?: number): Promise<ApiSchema[]>;
    getSchema(collection: string, name: string): Promise<ApiSchema>;
    getSchemaStats(collection: string, name: string): Promise<ApiSchemaStats>;
    getSchemaLogs(collection: string, name: string, page?: number, limit?: number, order?: string): Promise<ApiLog[]>;
    getTemplates(options: {
        [key: string]: any;
        collection_name?: string | undefined;
        schema_name?: string | undefined;
        authorized_account?: string | undefined;
        template_id?: string | undefined;
        order?: string | undefined;
        sort?: string | undefined;
    } | undefined, page: number | undefined, limit: number | undefined, data: {
        [key: string]: any;
    }): Promise<ApiTemplate[]>;
    getTemplate(collection: string, id: string): Promise<ApiTemplate>;
    getTemplateStats(collection: string, name: string): Promise<ApiTemplateStats>;
    getTemplateLogs(collection: string, id: string, page?: number, limit?: number, order?: string): Promise<ApiLog[]>;
    getTransfers(options?: {
        account?: string;
        sender?: string;
        recipient?: string;
        asset_id?: string;
        order?: string;
        sort?: string;
    }, page?: number, limit?: number): Promise<ApiTransfer[]>;
    getOffers(options?: {
        account?: string;
        sender?: string;
        recipient?: string;
        is_recipient_contract?: boolean;
        asset_id?: string;
        order?: string;
        sort?: string;
    }, page?: number, limit?: number): Promise<ApiOffer[]>;
    getOffer(id: string): Promise<ApiOffer>;
    fetchEndpoint(path: string, args: any): Promise<any>;
}
export {};
